{"version":3,"sources":["singleColumn.js","columns.js","App.js","serviceWorker.js","index.js"],"names":["Column","props","className","style","backgroundColor","color","name","cards","map","card","idx","onClick","moveCard","addCard","Columns","state","columns","JSON","parse","localStorage","getItem","bind","newCard","window","prompt","this","push","setState","setItem","stringify","cardIdx","direction","splice","col","key","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAqBeA,MAnBf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,OAAOC,MAAO,CAACC,gBAAiBH,EAAMI,QAAQ,6BAAMJ,EAAMK,OAExEL,EAAMM,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACb,yBAAKR,UAAU,QACI,IAAdD,EAAMS,IAAY,yBAAKR,UAAU,cAAiB,yBAAKA,UAAU,YAAYS,QAAS,kBAAIV,EAAMW,SAASX,EAAMS,IAAKA,EAAK,UAAvE,IAAkF,IAAlF,KACnD,yBAAKR,UAAU,YAAYO,GACZ,IAAdR,EAAMS,IAAY,GAAK,yBAAKR,UAAU,aAAaS,QAAS,kBAAIV,EAAMW,SAASX,EAAMS,IAAKA,EAAK,WAAxE,IAAoF,IAApF,SAIhC,yBAAKR,UAAU,UAAUS,QAAS,kBAAIV,EAAMY,QAAQZ,EAAMS,OAA1D,kBC8CGI,G,kBAxDX,WAAYb,GAAO,IAAD,8BACd,4CAAMA,KACDc,MAAQ,CACTC,QAASC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,CACpD,CAACd,KAAM,SAAUC,MAAO,CAAC,QAAS,SAAUF,MAAO,WACnD,CAACC,KAAM,MAAOC,MAAO,CAAC,QAAS,SAAUF,MAAO,WAChD,CAACC,KAAM,SAAUC,MAAO,CAAC,QAAS,SAAUF,MAAO,WACnD,CAACC,KAAM,SAAUC,MAAO,CAAC,QAAS,SAAUF,MAAO,aAG3D,EAAKQ,QAAU,EAAKA,QAAQQ,KAAb,gBACf,EAAKT,SAAW,EAAKA,SAASS,KAAd,gBAXF,E,qEAcVX,GAAK,IAAD,OACJY,EAAUC,OAAOC,OAAO,4BACxBR,EAAUS,KAAKV,MAAMC,QACzBA,EAAQN,GAAKH,MAAMmB,KAAKJ,GACxBG,KAAKE,SAAS,CAACX,YAAU,WACrBG,aAAaS,QAAQ,UAAWX,KAAKY,UAAU,EAAKd,MAAMC,e,+BAIzDN,EAAKoB,EAASC,GAAW,IAAD,OACzBf,EAAUS,KAAKV,MAAMC,QACrBP,EAAOO,EAAQN,GAAKH,MAAMuB,GAC9Bd,EAAQN,GAAKH,MAAMyB,OAAOF,EAAS,GAElB,SAAdC,EACCf,EAAQN,EAAM,GAAGH,MAAMmB,KAAKjB,GAE5BO,EAAQN,EAAI,GAAGH,MAAMmB,KAAKjB,GAG9BgB,KAAKE,SAAS,CACVX,YACD,WACCG,aAAaS,QAAQ,UAAWX,KAAKY,UAAU,EAAKd,MAAMC,e,+BAIzD,IAAD,OAGJ,OACI,yBAAKd,UAAU,mBACVuB,KAAKV,MAAMC,QAAQR,KAAI,SAACyB,EAAKvB,GAAN,OACpB,kBAAC,EAAD,CAAQE,SAAU,EAAKA,SAAUC,QAAS,EAAKA,QAASH,IAAKA,EAAKJ,KAAM2B,EAAI3B,KAAMC,MAAO0B,EAAI1B,MAAO2B,IAAKxB,EAAKL,MAAO4B,EAAI5B,gB,GAhDvH8B,IAAMC,YCObC,MAPf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,QCKcoC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e31a130.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Column(props){\n    return(\n        <div className=\"singleColumn\">\n            <div className=\"name\" style={{backgroundColor: props.color}}><div>{props.name}</div></div>\n\n            {props.cards.map((card, idx)=>\n                <div className=\"card\">\n                    {props.idx === 0 ? <div className=\"leftArrow\" /> : <div className=\"leftArrow\" onClick={()=>props.moveCard(props.idx, idx, \"left\")}> {'<'} </div>}\n                    <div className=\"cardText\">{card}</div>\n                    {props.idx === 3 ? \"\" : <div className=\"rightArrow\" onClick={()=>props.moveCard(props.idx, idx, \"right\")}> {'>'} </div>}\n                </div>\n            )}\n\n            <div className=\"addCard\" onClick={()=>props.addCard(props.idx)}> +Add a card</div>\n        </div>\n    );\n}\n    \n\nexport default Column;","import React from 'react';\nimport Column from './singleColumn';\nimport './columnStyle.css';\n\nclass Columns extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            columns: JSON.parse(localStorage.getItem('columns')) || [\n                {name: \"Winnie\", cards: [\"Card1\", \"Card2\"], color: '#8E6E95'},\n                {name: \"Bob\", cards: [\"card3\", \"card4\"], color: '#39A59C' },\n                {name: \"Thomas\", cards: [\"Card5\", \"card6\"], color: '#344759' },\n                {name: \"George\", cards: [\"Card7\", \"Card8\"], color: '#E87413' },\n            ]\n        };\n        this.addCard = this.addCard.bind(this);\n        this.moveCard = this.moveCard.bind(this);\n    }\n\n    addCard(idx){\n        let newCard = window.prompt(\"Please enter card text: \");\n        let columns = this.state.columns;\n        columns[idx].cards.push(newCard);\n        this.setState({columns}, () => {\n            localStorage.setItem('columns', JSON.stringify(this.state.columns));\n        });\n    }\n\n    moveCard(idx, cardIdx, direction){\n        let columns = this.state.columns;\n        let card = columns[idx].cards[cardIdx];\n        columns[idx].cards.splice(cardIdx, 1);\n\n        if(direction === \"left\"){\n            columns[idx - 1].cards.push(card);\n        }else{\n            columns[idx+1].cards.push(card);\n        }\n\n        this.setState({\n            columns\n        }, () => {\n            localStorage.setItem('columns', JSON.stringify(this.state.columns));\n        });\n    }\n\n    render(){\n        \n\n        return(\n            <div className=\"ColumnContainer\">\n                {this.state.columns.map((col, idx) => \n                    <Column moveCard={this.moveCard} addCard={this.addCard} idx={idx} name={col.name} cards={col.cards} key={idx} color={col.color}/>\n                )}\n            </div>\n        )\n    }\n}\n\n\n\nexport default Columns;","import React from 'react';\nimport './App.css';\nimport Columns from './columns';\n\nfunction App() {\n  return(\n    <div className=\"App\">\n      <Columns />\n    </div>\n  )\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}